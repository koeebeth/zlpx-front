import { useEffect, useState } from "react";

import { Loader } from "./components/Loader";
import { DebugButton } from "./components/DebugButton";
import { TabsEnum } from "./lib/constants";
import { telegramService } from "./lib/telegram";
import { useTelegramAuth } from "./hooks/useTelegramAuth";
import { UserProvider, useUser } from "./lib/contexts/UserContext";
import { AuthPage } from "./pages/Auth/Auth";
import { MainPage } from "./pages/Main/Main";
import { logger } from "./lib/logger";

function AppContent() {
  const [activeTab, setActiveTab] = useState<TabsEnum | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { updateUserFromAuth } = useUser();
  const { authenticate } = useTelegramAuth();

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è activeTab
  useEffect(() => {
    logger.log('üéØ activeTab –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞:', activeTab);
  }, [activeTab]);

  useEffect(() => {
    const initializeApp = async () => {
      try {
        await telegramService.initialize();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
        logger.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram...');
        const isTelegram = telegramService.isTelegramWebApp();
        logger.log('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram:', isTelegram);
        
        // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        logger.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
        const authResult = await authenticate(telegramService.getInitData() || '');
        logger.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authResult);
        
        if (authResult.success) {
          logger.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
          if (authResult.userProfile) {
            telegramService.saveUserProfile(authResult.userProfile);
            localStorage.setItem('user_profile', JSON.stringify(authResult.userProfile));
            updateUserFromAuth(authResult.userProfile);
          }
          setActiveTab(TabsEnum.MAIN);
        } else {
          logger.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
          setActiveTab(TabsEnum.AUTH);
        }
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        setActiveTab(TabsEnum.AUTH);
      } finally {
        setIsLoading(false);
      }
    };

    initializeApp();
  }, [updateUserFromAuth]);



  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è
  if (isLoading || activeTab === null) {
    return <Loader />;
  }

  return (
    <>
      {import.meta.env.DEV && (
        <div style={{ 
          position: 'fixed', 
          top: '10px', 
          right: '10px', 
          zIndex: 9999, 
          background: activeTab === TabsEnum.MAIN ? 'green' : 'orange', 
          color: 'white', 
          padding: '5px', 
          borderRadius: '5px',
          fontSize: '12px'
        }}>
          {activeTab}
        </div>
      )}
      {activeTab === TabsEnum.AUTH && <AuthPage onChangeTab={() => {
        logger.log('üîÑ AuthPage –≤—ã–∑–≤–∞–ª onChangeTab, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é...');
        logger.log('üîÑ –¢–µ–∫—É—â–∏–π activeTab:', activeTab);
        logger.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º activeTab –≤ MAIN...');
        setActiveTab(TabsEnum.MAIN);
        logger.log('üîÑ setActiveTab –≤—ã–∑–≤–∞–Ω —Å MAIN');
      }} />}
      {activeTab === TabsEnum.MAIN && <MainPage />}
      {import.meta.env.DEV && <DebugButton />}
    </>
  );
}

function App() {
  return (
    <UserProvider>
      <AppContent />
    </UserProvider>
  );
}

export default App;
