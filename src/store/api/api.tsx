import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

import { CalendarEventT } from "../calendar/state";
import { EventApiT } from "./models/models";

// –¢–∏–ø—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export interface TelegramAuthRequest {
  init_data: string;
}

import { UserProfile } from '../../types/models/UserProfile';

export interface TelegramAuthResponse {
  user_profile: UserProfile;
}

const BASE_PATH = import.meta.env.VITE_API_BASE_URL || "https://api.ingroupsts.ru";

export { BASE_PATH };

// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π baseQuery —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
const baseQueryWithDebug = fetchBaseQuery({ 
  baseUrl: BASE_PATH,
  prepareHeaders: (headers) => {
    headers.set('Content-Type', 'application/json');
    headers.set('Accept', 'application/json');
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers.set('X-Debug-Client', 'zlpx-front');
    headers.set('X-Request-Time', new Date().toISOString());
    return headers;
  },
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
  validateStatus: (response, body) => {
    console.log('üîç API Response:', {
      status: response.status,
      statusText: response.statusText,
      url: response.url,
      headers: Object.fromEntries(response.headers.entries())
    });
    
    if (response.status >= 200 && response.status < 300) {
      return true;
    }
    
    console.error('‚ùå API Error Response:', {
      status: response.status,
      statusText: response.statusText,
      body: body
    });
    
    return false;
  }
});

export const calendarApi = createApi({
  reducerPath: "calendarApi",
  baseQuery: baseQueryWithDebug,
  endpoints: (builder) => ({
    getSchedule: builder.query<
      CalendarEventT[],
      {
        start?: string;
        end?: string;
      } | void
    >({
      query: (q) => {
        const params = new URLSearchParams();
        if (q?.start) params.append('start_date', q.start);
        if (q?.end) params.append('end_date', q.end);

        return `/schedule?${params.toString()}`;
      },
      transformResponse: (rawResponse: {
        events: EventApiT[];
      }): CalendarEventT[] => {
        return rawResponse.events.map((evt) => ({
          datetime: evt.date,
          title: evt.activity,
          location: "",
          project: evt.project,
        }));
      },
    }),
    
    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram
    telegramAuth: builder.mutation<TelegramAuthResponse, TelegramAuthRequest>({
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º—É—Ç–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      invalidatesTags: [],
      query: (credentials) => {
        console.log('üöÄ RTK Query: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:', {
          url: `${BASE_PATH}/auth/telegram`,
          method: 'POST',
          body: credentials,
          timestamp: new Date().toISOString()
        });
        
        return {
          url: '/auth/telegram',
          method: 'POST',
          body: credentials,
        };
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
      async onQueryStarted(credentials, { queryFulfilled }) {
        console.log('üöÄ RTK Query onQueryStarted —Å –¥–∞–Ω–Ω—ã–º–∏:', credentials);
        try {
          console.log('‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç queryFulfilled...');
          const result = await queryFulfilled;
          console.log('‚úÖ RTK Query: –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', result);
          console.log('‚úÖ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', typeof result);
          console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', JSON.stringify(result, null, 2));
          console.log('‚úÖ user_profile:', result.data?.user_profile);
        } catch (error: any) {
          console.error('‚ùå RTK Query: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
          console.error('‚ùå –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏:', JSON.stringify(error, null, 2));
          console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            error: error?.error,
            status: error?.error?.status,
            data: error?.error?.data,
            originalStatus: error?.error?.originalStatus,
            name: error?.name,
            message: error?.message
          });
        }
      }
    }),
  }),
});

export const { useGetScheduleQuery, useTelegramAuthMutation } = calendarApi;
